#!/usr/bin/env ruby
require 'rubygems'
require 'commander/import'
require "bundler/setup"
require "similarwebCLI"

    program :name, 'similarweb CLI'
    program :version, '1.0.0'
    program :description, 'Call the similar web API'

    default_command :help

    command :traffic do |c|
      c.syntax = 'sw traffic'
      c.description = 'call the traffic endpoint, returns csv as default'
      c.option '-j', '--json', "Returns json instead of csv"
      c.option '-i', '--head', "Prints the header row only"
      c.option '-d', '--domain STRING', String, "domain to query"
      c.option '-s', '--startDate DATE', String, "Start date, defaults to last month"
      c.option '-e', '--endDate DATE', String, "End Date,defaults to last month"
      c.option '-m', '--mainDomain BOOLEAN', String, "True returns data for main domain only, False returns data for subdomains as well. Defaults to false."
      c.option '-g', '--granularity STRING', String, "daily,monthly,weekly, Defaults to monthly"
      c.option '--debug', String, "Returns also debug info"

      c.action do |args, options|
        #quick check #1
        puts "no domain specified" if !options.domain
        exit if !options.domain

        #default options
        defaultDate = Date.today.prev_month.strftime("%Y-%m")
        options.default :startDate => defaultDate,
                        :endDate => defaultDate,
                        :mainDomain => false,
                        :granularity => "monthly",
                        :debug => false

        # prints csv header row only if -i
        puts "'domain','date','visits','comment'" if options.head
        exit if options.head
        # make the call
        client = SimilarwebCLI::Client.new
        response = client.traffic(options.domain,options.startDate,options.endDate,options.mainDomain,options.granularity,options.debug)
        puts response.to_json if options.json
        exit if options.json
        #if json is false, print csv
        # quick check #2, if no results print special row with error message.
        puts "'','','',#{response["meta"]["error_message"]}" if response["meta"]["status"] == "Error"
        exit if response["meta"]["status"] == "Error"
        response["visits"].each do |r|
          puts "'#{options.domain}','#{r["date"]}','#{r["visits"]}'"
        end
      end
    end
